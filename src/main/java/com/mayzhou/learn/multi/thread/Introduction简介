1.1 并发简史
早期的计算机不包含操作系统
操作系统的出现使得计算机每次都能运行多个程序
为什么要使用操作系统
    资源利用率
    公平性
    便利性
    在早期的分时系统中，每个进程都相当于一台冯诺依曼计算机，它拥有存储指令和数据的存储空间，根据机器语言的语义以串行的方式执行指令，并通过一组IO指令与外部设备通信。对每一条被执行的指令，都有相应的“下一条指令”，程序中的控制流是按照指令集的规则来确定的。当前，几乎所有的编程语言也是如此
    线程出现原因和进程出现的原因是一样的
        线程允许在同一个进程中同时存在多个程序控制流。线程会共享进程范围内的资源。
        线程也被称为轻量级进程。在大多数现代操作系统中，都是以线程为基本的调度单位，而不是进程。
        如果没有明确的协同机制，那么线程将彼此独立执行。由于同一个进程中的所有线程都将共享进程的内存地址空间，因此这些线程都能访问相同的变量并在同一个堆上分配对象，这就需要实现一种比在进程间共享机制。
     线程的优势
        如果使用得当，线程可以有效地降低程序的开发和维护成本，同时提升复杂应用程序的性能。
        线程能够将大部分的异步工作流转换成串行工作流。
        可以降低代码的复杂度。
        在GUI中，线程可以提高用户界面的响应灵敏度。
        在服务器应用程序中，可以提高资源利用率以及系统吞吐率。
        线程还可以简化JVM的实现。
        发挥多核处理器的强大能力。由于基本的调度单位是线程，因此如果在程序中只有一个线程，那么最多只能在一个处理器上运行，单线程在多处理器系统上，资源利用率太低
        多线程在有助于在单处理器系统上获得更高的吞吐率。如果程序是单线程的，那么当程序在等待某个同步ID操作完成时，处理器将处于空闲状态。而在多线程程序中如果一个线程在等待IO操作完成时，另一个线程可以继续完成，使得程序能够在IO阻塞期间继续运行。
        建模的简单性
        异步事件的简化处理：服务器应用程序在接受来自多个远程客户端的套接字连接请求时，如果为每个连接都分配其各自的线程并且使用同步IO，那么就会降低这类程序的开发难度。
     线程带来的风险
